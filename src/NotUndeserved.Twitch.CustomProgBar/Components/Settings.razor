@using NotUndeserved.Twitch.CustomProgBar.Application.Common
@using NotUndeserved.Twitch.CustomProgBar.Application.Dtos
@using System.Text.Json
@inject IJSRuntime JS
@inject NavigationManager Nav

<style>
    .top-menu {
    display: flex;
    gap: 1rem;
    background-color: #4D493E;
    padding: 0.5rem 1rem;
    border-bottom: 1px solid #aaa;
    }

    .menu-item {
    position: relative;
    }

    .menu-button {
    background: none;
    border: none;
    color: #ccc;
    font-size: 1rem;
    padding: 0.5rem 1rem;
    cursor: pointer;
    }

    .menu-button.active {
    color: #fff;
    border-bottom: 2px solid #fff;
    }

    .submenu {
    display: none;
    position: absolute;
    top: 100%;
    left: 0;
    background-color: #4D493E;
    border: 1px solid #888;
    z-index: 10;
    }

    .menu-item:hover .submenu {
    display: block;
    }

    .submenu button {
    display: block;
    width: 100%;
    background: none;
    border: none;
    color: #ccc;
    padding: 0.5rem 1rem;
    text-align: left;
    }

    .submenu button:hover {
    background-color: #444;
    color: #fff;
    }
</style>

<main>
    <div class="container" style="display: flex; gap: 2rem; flex-wrap: wrap;">
        <div class="content" style="flex: 1; min-width: 300px; min-height: 512px; display: flex; flex-direction: column;">

            <div class="top-menu nier-border">
                <div class="menu-item">
                    <button class="menu-button @(selectedTab == "oauth" ? "active" : "")" @onclick="@(() => selectedTab = "oauth")">OAuth</button>
                </div>
                <div class="menu-item">
                    <button class="menu-button @(selectedTab == "graphics" ? "active" : "")" @onclick="@(() => selectedTab = "graphics")">Graphics</button>
                </div>
                <div class="menu-item">
                    <button class="menu-button @(selectedTab == "redemptions" ? "active" : "")" @onclick="@(() => selectedTab = "redemptions")">Redemptions</button>
                </div>
            </div>

            <div style="flex: 1; display: flex; flex-direction: column;">
                @if (selectedTab == "oauth") {
                    <section style="flex: 1;">
                        <h2>OAuth Settings</h2>

                        <div style="margin-bottom: 1rem;">
                            <label>Access Token:</label>
                            <button type="button" @onclick="RequestNewToken" style="margin-left: 1rem;">Request access token</button><br />
                            <label class="block nier-border" style="display: block; padding: 1rem; font-weight: bold;">
                                @{
                                    var now = DateTimeOffset.UtcNow.ToUnixTimeMilliseconds();
                                    var tokenStatus = string.IsNullOrEmpty(accessToken)
                                    ? "[No token available]"
                                    : (expiresAt > now ? "[Token active]" : "[Token expired]");
                                }
                                @tokenStatus
                            </label>
                        </div>

                        <div style="margin-bottom: 1rem;">
                            <label>Expires At:</label><br />
                            <label class="block nier-border" style="display: block; padding: 1rem; font-weight: bold;">
                                @(expiresAt > 0
                                                ? DateTimeOffset.FromUnixTimeMilliseconds(expiresAt).ToLocalTime().ToString("f")
                                                : "(Undefined)")
                            </label>
                        </div>

                        <div style="margin-bottom: 1rem;">
                            <label>Channel Name:</label><br />
                            <label class="block nier-border" style="display: block; padding: 1rem; font-weight: bold;">
                                @(!string.IsNullOrEmpty(channelName) ? channelName : "(Undefined)")
                            </label>
                        </div>
                    </section>
                } else if (selectedTab == "graphics") {
                    <section style="flex: 1;">
                        <h2>Graphics</h2>

                        <div style="margin-bottom: 1rem;">
                            <label>Custom Bar:</label><br />
                            <input type="file" @ref="_imageInputRef" @onchange="OnWidgetImageChanged"
                            class="nier-border"
                            style="padding: 0.5rem; background: #A39C84;" />
                        </div>

                        <div style="margin-bottom: 1rem;">
                            <label>Custom Dial:</label><br />
                            <input type="file" @ref="_dialInputRef" @onchange="OnDialImageChanged"
                            class="nier-border"
                            style="padding: 0.5rem; background: #A39C84;" />
                        </div>

                        <div>
                            <label>Segments:</label>
                            <InputNumber @bind-Value="segments" class="nier-border" style="padding: 0.5rem; max-width: 155px; background: #A39C84;" />
                        </div>
                    </section>
                } else if (selectedTab == "redemptions") {
                    <section style="flex: 1;">
                        <h2>Redemptions</h2>
                        <div style="margin-bottom: 1rem;">
                            <label>Increase event:</label><br />
                            <input @bind="redemptionIncrease" class="nier-border" style="padding: 0.5rem; background: #A39C84;" />
                        </div>
                        <div style="margin-bottom: 1rem;">
                            <label>Decrease event:</label><br />
                            <input @bind="redemptionDecrease" class="nier-border" style="padding: 0.5rem; background: #A39C84;" />
                        </div>
                        <div style="margin-bottom: 1rem;">
                            <label>Reset event:</label><br />
                            <input @bind="redemptionReset" class="nier-border" style="padding: 0.5rem; background: #A39C84;" />
                        </div>
                    </section>
                }
            </div>

            <div style="padding-top: 1rem;">
                <button type="button" @onclick="SaveSettings" style="padding: 0.5rem;">Save settings</button>
                <button type="button" @onclick="ExportToken" style="padding: 0.5rem;">Export settings</button>
                <button type="button" @onclick="TriggerImport" style="padding: 0.5rem;">Import settings</button>
                <input type="file" @ref="importFileRef" @onchange="ImportToken" style="display: none;" />
            </div>
        </div>
    </div>
</main>


@code {
    private ElementReference _imageInputRef;
    private ElementReference _dialInputRef; 
    private ElementReference importFileRef;
    private IJSObjectReference? _eventSubModule;

    private string selectedTab = "oauth";
    private string? accessToken;
    private long expiresAt;
    private string channelName = "";
    private string imageDataUrl = "";
    private string dialDataUrl = "";
    private int segments;
    private string redemptionIncrease = "";
    private string redemptionDecrease = "";
    private string redemptionReset = "";

    protected override async Task OnInitializedAsync() {
        _eventSubModule = await JS.InvokeAsync<IJSObjectReference>("import", "./js/twitchEventSub.js");
        await PullDataFromLocalStorage();
    }

    private async Task PullDataFromLocalStorage() {
        accessToken = await JS.InvokeAsync<string>("localStorage.getItem", LocalResources.TwitchAccessToken);
        var expiresAtStr = await JS.InvokeAsync<string>("localStorage.getItem", LocalResources.TwitchTokenExpiresAt);
        var storedChannel = await JS.InvokeAsync<string>("localStorage.getItem", LocalResources.TwitchChannelName);
        var storedImage = await JS.InvokeAsync<string>("localStorage.getItem", LocalResources.CustomBarImage);
        var storedDialImg = await JS.InvokeAsync<string>("localStorage.getItem", LocalResources.CustomDialImage);
        var storedSegments = await JS.InvokeAsync<string>("localStorage.getItem", LocalResources.CustomWidgetSegments);
        var storedIncrease = await JS.InvokeAsync<string>("localStorage.getItem", LocalResources.RedemptionIncrease);
        var storedDecrease = await JS.InvokeAsync<string>("localStorage.getItem", LocalResources.RedemptionDecrease);
        var storedReset = await JS.InvokeAsync<string>("localStorage.getItem", LocalResources.RedemptionReset);

        channelName = storedChannel ?? "";
        redemptionIncrease = storedIncrease ?? "";
        redemptionDecrease = storedDecrease ?? "";
        redemptionReset = storedReset ?? "";

        _ = long.TryParse(expiresAtStr, out expiresAt);
        _ = int.TryParse(storedSegments, out segments);
        if (segments <= 0) {
            segments = 8;
        }
        if (!string.IsNullOrWhiteSpace(storedImage)) {
            imageDataUrl = storedImage;
        }

        if (!string.IsNullOrWhiteSpace(storedDialImg)) {
            dialDataUrl = storedDialImg;
        }        
    }

    private async Task OnWidgetImageChanged(ChangeEventArgs e) {
        imageDataUrl = await ReadImageAsBase64(_imageInputRef);
        await JS.InvokeVoidAsync("localStorage.setItem", LocalResources.CustomBarImage, imageDataUrl);

        await _eventSubModule.InvokeVoidAsync("dispatchForceLocalStorageUpdate");
        await JS.InvokeVoidAsync("alert", "Custom bar deployed.");
    }

    private async Task OnDialImageChanged(ChangeEventArgs e) {
        dialDataUrl = await ReadImageAsBase64(_dialInputRef);
        await JS.InvokeVoidAsync("localStorage.setItem", LocalResources.CustomDialImage, dialDataUrl);

        await _eventSubModule.InvokeVoidAsync("dispatchForceLocalStorageUpdate");
        await JS.InvokeVoidAsync("alert", "Custom dial deployed.");
    }

    private async Task SaveSettings() {
        await JS.InvokeVoidAsync("localStorage.setItem", LocalResources.CustomBarImage, imageDataUrl);
        await JS.InvokeVoidAsync("localStorage.setItem", LocalResources.CustomDialImage, dialDataUrl);
        await JS.InvokeVoidAsync("localStorage.setItem", LocalResources.CustomWidgetSegments, Math.Max(segments, 2).ToString());
        await JS.InvokeVoidAsync("localStorage.setItem", LocalResources.RedemptionIncrease, redemptionIncrease);
        await JS.InvokeVoidAsync("localStorage.setItem", LocalResources.RedemptionDecrease, redemptionDecrease);
        await JS.InvokeVoidAsync("localStorage.setItem", LocalResources.RedemptionReset, redemptionReset);

        await InvokeAsync(StateHasChanged);
        await JS.InvokeVoidAsync("alert", "Settings saved.");
    }

    private void RequestNewToken() {
        Nav.NavigateTo("oauth", forceLoad: true);
    }

    private async Task ExportToken() {
        var access = await JS.InvokeAsync<string>("localStorage.getItem", LocalResources.TwitchAccessToken);
        var refresh = await JS.InvokeAsync<string>("localStorage.getItem", LocalResources.TwitchRefreshToken);
        var expires = await JS.InvokeAsync<string>("localStorage.getItem", LocalResources.TwitchTokenExpiresAt);
        var channel = await JS.InvokeAsync<string>("localStorage.getItem", LocalResources.TwitchChannelName);
        var barImage = await JS.InvokeAsync<string>("localStorage.getItem", LocalResources.CustomBarImage);
        var dialImage = await JS.InvokeAsync<string>("localStorage.getItem", LocalResources.CustomDialImage);
        var segments = await JS.InvokeAsync<string>("localStorage.getItem", LocalResources.CustomWidgetSegments);
        var increase = await JS.InvokeAsync<string>("localStorage.getItem", LocalResources.RedemptionIncrease);
        var decrease = await JS.InvokeAsync<string>("localStorage.getItem", LocalResources.RedemptionDecrease);
        var reset = await JS.InvokeAsync<string>("localStorage.getItem", LocalResources.RedemptionReset);

        var export = new SettingsDto {
                AccessToken = access ?? "",
                RefreshToken = refresh ?? "",
                ExpiresAt = expires ?? "",
                ChannelName = channel ?? "",
                CustomBarUrl = barImage ?? "",
                CustomDialUrl = dialImage ?? "",
                BarSegments = segments ?? "",
                RedemptionIncrease = increase ?? "",
                RedemptionDecrease = decrease ?? "",
                RedemptionReset = reset ?? ""
            };

        var json = JsonSerializer.Serialize(export);
        await _eventSubModule!.InvokeVoidAsync("downloadTokenJson", json);
    }    

    private async Task TriggerImport() {
        await _eventSubModule!.InvokeVoidAsync("triggerFileInput", importFileRef);
    }

    private async Task ImportToken(ChangeEventArgs e) {
        var json = await _eventSubModule!.InvokeAsync<string>("readTokenJson", importFileRef);
        try {
            var token = JsonSerializer.Deserialize<SettingsDto>(json);
            if (token is null) {
                await JS.InvokeVoidAsync("alert", "Invalid token file.");
                return;
            }

            await JS.InvokeVoidAsync("localStorage.setItem", LocalResources.TwitchAccessToken, token.AccessToken);
            await JS.InvokeVoidAsync("localStorage.setItem", LocalResources.TwitchRefreshToken, token.RefreshToken);
            await JS.InvokeVoidAsync("localStorage.setItem", LocalResources.TwitchTokenExpiresAt, token.ExpiresAt);
            await JS.InvokeVoidAsync("localStorage.setItem", LocalResources.TwitchChannelName, token.ChannelName);
            await JS.InvokeVoidAsync("localStorage.setItem", LocalResources.CustomBarImage, token.CustomBarUrl);
            await JS.InvokeVoidAsync("localStorage.setItem", LocalResources.CustomDialImage, token.CustomDialUrl); 
            await JS.InvokeVoidAsync("localStorage.setItem", LocalResources.CustomWidgetSegments, token.BarSegments);
            await JS.InvokeVoidAsync("localStorage.setItem", LocalResources.RedemptionIncrease, token.RedemptionIncrease);
            await JS.InvokeVoidAsync("localStorage.setItem", LocalResources.RedemptionDecrease, token.RedemptionDecrease);
            await JS.InvokeVoidAsync("localStorage.setItem", LocalResources.RedemptionReset, token.RedemptionReset);

            await PullDataFromLocalStorage();

            await InvokeAsync(StateHasChanged);
            await JS.InvokeVoidAsync("alert", "Token imported successfully.");
        } catch {
            await JS.InvokeVoidAsync("alert", "Failed to parse or import the token.");
        }
    }

    private async Task<string> ReadImageAsBase64(ElementReference inputRef) {
        return await _eventSubModule.InvokeAsync<string>("readFileAsDataUrl", inputRef);
    }
}
